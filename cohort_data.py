 
# def unique_houses(filename): 
#     """TODO: Create a set of student houses.

#     Iterates over the cohort_data.txt file to look for all of the included house names
#     and creates a set called 'houses' that holds those names.

#         ex. houses = set([ "Hufflepuff", 
#                     "Slytherin", 
#                     "Ravenclaw", 
#                     "Gryffindor", 
#                     "Dumbledore's Army"
#             ])
#     """
#     enrollment_data = open(filename)

#     house_list = []
#     for line in enrollment_data:
#         student_record = line.rstrip().split("|")
#         house = student_record[2]
#         house_list.append(house)
    
#     houses = set(house_list)
#     print houses
#     return houses

# unique_houses("cohort_data.txt")

def sort_by_cohort(filename):
    """TODO: Sort students by cohort.

    Iterates over the data to create a list for each cohort, ordering students
    alphabetically by first name and tas separately. Returns list of lists.

        ex. winter_15 = ["alice tsao", "amanda gilmore", "anne vetto", "..." ]
        ex. all_students = [winter_15, spring_15, tas]
    
    """

#     all_students = []
#     winter_15 = []
#     spring_15 = []
#     tas = []

#     enrollment_data = open(filename)
#     for line in enrollment_data:
#         student_record = line.rstrip().split("|")
#         name = student_record[0] + " " + student_record[1]
#         term = student_record[4]
#         if term == "Spring 2015":
#             spring_15.append(name)
#         elif term == "Winter 2015":
#             winter_15.append(name)
#         else:
#             tas.append(name)
#     spring_15 = sorted(spring_15)
#     winter_15 = sorted(winter_15)
#     tas = sorted(tas)
    
#     all_students = spring_15 , winter_15, tas
#     all_students = list(all_students)
    
#     return all_students 

# sort_by_cohort("cohort_data.txt")

# def students_by_house(filename):
#     """TODO: Sort students by house.

#     Iterate over the data to create a list for each house, and sort students
#     into their appropriate houses by last name. Sort TAs into a list called "tas".
#     Return all lists in one list of lists.
#         ex. hufflepuff = ["Gaikwad", "Wiedl", "..." ]
#         ex. tas = ["Bryant", "Lefevre", "..."]
#         ex. houses_tas = [ hufflepuff, 
#                         gryffindor, 
#                         ravenclaw, 
#                         slytherin, 
#                         dumbledores_army, 
#                         tas 
#             ]
#     """

#     all_students = []
#     gryffindor = []
#     hufflepuff = []
#     slytherin = []
#     dumbledores_army = []
#     ravenclaw = []
#     tas = []

#     enrollment_data = open(filename)
#     for line in enrollment_data:
#         student_record = line.rstrip().split("|")
#         house = student_record[2]
#         name = student_record[0] + " " + student_record[1]
#         if house == "Slytherin":
#             slytherin.append(name)
#         elif house == "Gryffindor":
#             gryffindor.append(name)
#         elif house == "Hufflepuff":
#             hufflepuff.append(name)
#         elif house == "Ravenclaw":
#             ravenclaw.append(name)
#         elif house == "Dumbledore's Army":
#             dumbledores_army.append(name)
#         else:
#             tas.append(name)

#     all_students = slytherin, gryffindor, ravenclaw, hufflepuff, dumbledores_army
#     all_students = list(all_students)
#     return all_students

# students_by_house("cohort_data.txt")


def all_students_tuple_list(filename):
    """TODO: Create a list of tuples of student data.

    Iterates over the data to create a big list of tuples that individually
    hold all the data for each person. (full_name, house, advisor, cohort)
        ex. all_people = [
                ("Alice Tsao", "Slytherin", "Kristen", "Winter 2015"),
                ("Amanda Gilmore", "Hufflepuff", "Meggie", "Winter 2015"),
                # ...
            ]
    """

    student_list = []

    enrollment_data = open(filename)

    for line in enrollment_data:
        student_record = line.rstrip().split("|")
        name = student_record[0] + " " + student_record[1]
        student = student_record
        student[0:2] = [name]
        student = tuple(student)
        student_list.append(student)

    print student_list
    # Code goes here

    return student_list

all_students_tuple_list("cohort_data.txt")

def find_cohort_by_student_name(student_list):
    """TODO: Given full name, return student's cohort.

    Use the above list of tuples generated by the preceding function to make a small
    function that, given a first and last name, returns that student's cohort, or returns
    'Student not found.' when appropriate. """

    # Code goes here

    return "Student not found."


##########################################################################################
# Further Study Questions


def find_name_duplicates(filename):
    """TODO: Using set operations, make a set of student first names that have duplicates.

    Iterates over the data to find any first names that exist across multiple cohorts. 
    Uses set operations (set math) to create a set of these names. 
    NOTE: Do not include staff -- or do, if you want a greater challenge. 

       ex. duplicate_names = set(["Sarah", "Nicole"])

    """

    duplicate_names = set()

    # Code goes here

    return duplicate_names


def find_house_members_by_student_name(student_list):
    """TODO: Create a function that, when given a name, returns everyone in
    their house that's in their cohort.

    Use the list of tuples generated by all_students_tuple_list to make a small function that,
    when given a student's first and last name, returns students that are in both that
    student's cohort and that student's house."""

    # Code goes here

    return

